import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
import datetime
import hashlib

from pylogfile.base import markdown

#=========================== Create initial conditions ===========================
f0_GHz = 4.815

ampl = 1
b = 28
sigma = 5
omega = np.pi*2*f0_GHz
phi = 0

tmax = 65

show_target = True

# Create time points when wavefronts occur
T_ns = 1/f0_GHz
wavefronts = np.arange(0, tmax-T_ns/4+T_ns, T_ns)
wavefronts = wavefronts + T_ns/4

# Create powers
powers = ampl*np.exp( -(wavefronts-b)**2/(2*sigma**2) )

#=========================== Apply delay ===========================

# Set some coefficients
length = 1
L0 = 1
I_star = 5
C0 = 1

L_prime = L0*(1 + powers**2/I_star**2) # Calcualte total inductnace
v_phase = 1/np.sqrt(L_prime*C0) # Calculate phase velocity
t_prop = length/v_phase # Calculate propagation time


wavefronts_f = wavefronts + t_prop # Calculate propagated signal

# Calculate resulting frequencies
freqs_0 = 1/np.diff(wavefronts)
times_0 = wavefronts[:-1] + T_ns/2

delta_t_f = np.diff(wavefronts_f)
freqs_f = 1/delta_t_f
times_f = wavefronts_f[:-1] + delta_t_f/2

#=========================== Plot results ===========================

datestr = f"{datetime.datetime.now()}"
cond_hash = hashlib.sha1(datestr.encode("utf-8")).hexdigest()

fig1 = plt.figure(figsize=(8,6))
fig1.suptitle(f"ID hash: {cond_hash}", fontsize=8)
gs = fig1.add_gridspec(4, 1)

ax0 = fig1.add_subplot(gs[0:2, 0])
ax1 = fig1.add_subplot(gs[2, 0])
ax2 = fig1.add_subplot(gs[3, 0])

ax0.set_title("Transformed Pulse: Frequency")
ax0.plot(times_f, freqs_f, label='Simulated')
ax0.set_xlabel("Time (ns)")
ax0.set_ylabel("Frequency (GHz)")
ax0.grid(True)
ax0.set_ylim([4.78, 4.84])


if show_target:
	fit_time = [21.74114, 21.79114, 21.841140000000003, 21.89114, 21.941139999999997, 21.99114, 22.04114, 22.091140000000003, 22.14114, 22.191139999999997, 22.24114, 22.29114, 22.34114, 22.39114, 22.44114, 22.49114, 22.54114, 22.591140000000003, 22.64114, 22.691139999999997, 22.74114, 22.79114, 22.841140000000003, 22.89114, 22.94114, 22.99114, 23.04114, 23.09114, 23.14114, 23.19114, 23.24114, 23.29114, 23.341140000000003, 23.39114, 23.441139999999997, 23.49114, 23.54114, 23.591140000000003, 23.64114, 23.69114, 23.74114, 23.79114, 23.84114, 23.89114, 23.94114, 23.99114, 24.04114, 24.091140000000003, 24.14114, 24.191139999999997, 24.24114, 24.29114, 24.341140000000003, 24.39114, 24.44114, 24.49114, 24.54114, 24.59114, 24.64114, 24.69114, 24.74114, 24.79114, 24.841140000000003, 24.89114, 24.941139999999997, 24.99114, 25.04114, 25.09114, 25.14114, 25.19114, 25.24114, 25.29114, 25.34114, 25.39114, 25.44114, 25.49114, 25.54114, 25.59114, 25.64114, 25.69114, 25.74114, 25.79114, 25.84114, 25.89114, 25.94114, 25.99114, 26.04114, 26.09114, 26.14114, 26.19114, 26.24114, 26.29114, 26.34114, 26.39114, 26.44114, 26.49114, 26.54114, 26.59114, 26.64114, 26.69114, 26.74114, 26.79114, 26.84114, 26.89114, 26.941139999999997, 26.99114, 27.04114, 27.09114, 27.14114, 27.19114, 27.24114, 27.29114, 27.34114, 27.39114, 27.441139999999997, 27.49114, 27.54114, 27.591140000000003, 27.64114, 27.691139999999997, 27.74114, 27.79114, 27.84114, 27.89114, 27.94114, 27.99114, 28.04114, 28.09114, 28.14114, 28.191139999999997, 28.241139999999998, 28.29114, 28.34114, 28.39114, 28.441139999999997, 28.49114, 28.54114, 28.591140000000003, 28.64114, 28.691139999999997, 28.74114, 28.79114, 28.841140000000003, 28.89114, 28.94114, 28.99114, 29.04114, 29.091140000000003, 29.14114, 29.19114, 29.24114, 29.29114, 29.34114, 29.39114, 29.44114, 29.49114, 29.54114, 29.59114, 29.64114, 29.691139999999997, 29.741139999999998, 29.79114, 29.84114, 29.89114, 29.941139999999997, 29.99114, 30.04114, 30.091139999999996, 30.14114, 30.191139999999997, 30.24114, 30.29114, 30.341140000000003, 30.39114, 30.441140000000004, 30.49114, 30.54114, 30.591140000000003, 30.64114, 30.691139999999997, 30.741139999999998, 30.79114, 30.841139999999996, 30.891139999999996, 30.941139999999997, 30.991139999999998, 31.04114, 31.09114, 31.14114, 31.191139999999997, 31.241139999999998, 31.29114, 31.34114, 31.39114, 31.44114, 31.49114, 31.54114, 31.59114, 31.64114, 31.691139999999997, 31.74114, 31.79114, 31.841140000000003, 31.89114, 31.94114, 31.99114, 32.04114, 32.09114, 32.14114, 32.191140000000004, 32.24114, 32.29114, 32.341139999999996, 32.39114, 32.44114, 32.491139999999994, 32.54114, 32.591139999999996, 32.64114, 32.69114, 32.74114, 32.79114, 32.841139999999996, 32.89114, 32.94114, 32.99114, 33.04114, 33.091139999999996, 33.14114, 33.19114, 33.24114, 33.29114, 33.34114, 33.39114, 33.441140000000004, 33.49114, 33.54114, 33.59114, 33.64114, 33.691140000000004, 33.74114, 33.79114, 33.841139999999996, 33.89114, 33.941140000000004, 33.99114, 34.04114, 34.091139999999996, 34.14114, 34.19114, 34.24114, 34.29114, 34.341139999999996, 34.39114, 34.44114, 34.49114, 34.54114, 34.591139999999996, 34.64114, 34.69114, 34.74114, 34.79114, 34.84114, 34.89114, 34.941140000000004, 34.99114, 35.04114, 35.09114, 35.14114, 35.191140000000004, 35.24114, 35.29114, 35.34114, 35.39114, 35.441140000000004, 35.49114, 35.54114, 35.591139999999996, 35.64114, 35.691140000000004, 35.74114, 35.79114, 35.841139999999996, 35.89114, 35.94114, 35.99114, 36.04114, 36.091139999999996, 36.14114, 36.19114, 36.24114, 36.29114, 36.34114, 36.39114, 36.441140000000004, 36.49114, 36.54114, 36.59114, 36.64114, 36.691140000000004, 36.74114, 36.79114, 36.84114, 36.89114, 36.941140000000004, 36.99114, 37.04114, 37.091139999999996, 37.14114, 37.191140000000004, 37.24114, 37.29114, 37.341139999999996, 37.39114, 37.44114, 37.49114, 37.54114, 37.591139999999996, 37.64114, 37.69114, 37.74114, 37.79114, 37.841139999999996, 37.89114, 37.941140000000004, 37.99114, 38.04114, 38.09114, 38.14114, 38.191140000000004]
	fit_freq = [4.807676003117259, 4.808208618278663, 4.808152350954904, 4.807332704857156, 4.807313778083592, 4.80663280040468, 4.806789269762578, 4.806632999146904, 4.806508858267363, 4.805483763951508, 4.804883419988069, 4.8037691416051915, 4.802788056835056, 4.802247819371165, 4.801694774683611, 4.801079386297368, 4.800947613598767, 4.801123584454806, 4.801339602930663, 4.801894750145386, 4.802174220455238, 4.802682776852071, 4.803160013576714, 4.80365192941845, 4.803360441835927, 4.803184169464468, 4.802358801633108, 4.801700271378278, 4.801488037167441, 4.800392036901455, 4.799631691252676, 4.7992607108387295, 4.798745527834489, 4.798767141201113, 4.798766093675958, 4.798990532003332, 4.79957564607588, 4.799233896121444, 4.7989472916320475, 4.798734483896745, 4.798743090497028, 4.7987435443401525, 4.798759918470786, 4.798751228082812, 4.798739975938583, 4.798734092175547, 4.798725368631938, 4.798718489302286, 4.7987239115990805, 4.798722182223036, 4.798730495046857, 4.7987335913582, 4.798719311491859, 4.7987102080630795, 4.798696702464342, 4.798668591500349, 4.798661867333033, 4.8001370566902075, 4.8006290598605394, 4.801534110924111, 4.80161853480338, 4.8013812925365915, 4.801202053606568, 4.800274748169569, 4.800137891029466, 4.799342593374768, 4.7992012450550465, 4.798710647971938, 4.798712645957685, 4.798711223542492, 4.798711730989032, 4.798714685693863, 4.79871396612375, 4.798704363924082, 4.798692935311456, 4.798681052368641, 4.798672977681606, 4.7986593122896295, 4.798650313704204, 4.7986371287630165, 4.798641451199785, 4.798636204880459, 4.798652432053823, 4.798651719274386, 4.798656015206873, 4.798642698877886, 4.79863826414382, 4.798637700379894, 4.798637552784656, 4.798646488460211, 4.79864927890702, 4.798660869076232, 4.798650820911621, 4.799038523377325, 4.800130965621159, 4.8004175831197395, 4.800378348268746, 4.80005020358971, 4.799036300908707, 4.798662692439862, 4.79864896915116, 4.79864289105249, 4.798877241811741, 4.7996666341706264, 4.800935237592706, 4.801638848910531, 4.80262208419104, 4.802564521528794, 4.803263968742605, 4.803352003594811, 4.803591303998213, 4.803862565428484, 4.804154791586229, 4.803799914685881, 4.803602157792497, 4.803425716204175, 4.803749504482438, 4.804747776558289, 4.8054581344535885, 4.806245944676849, 4.806855730309209, 4.807599118323668, 4.808109346235288, 4.808427545128691, 4.808717906533681, 4.808716502524355, 4.809103626794079, 4.808831453880343, 4.809382213795669, 4.8089823969232555, 4.80938559056694, 4.8091019566841435, 4.809482911260459, 4.80983754173987, 4.810605437722189, 4.811172220585663, 4.8119060178245086, 4.812782145445511, 4.813092394896313, 4.813456429933827, 4.814146468230096, 4.814402653220619, 4.8149242769220395, 4.815339890220912, 4.815796436647693, 4.816670164131915, 4.817350793240393, 4.8175234325705025, 4.8174489964502145, 4.817255101882162, 4.816936684288133, 4.816765828342487, 4.816392208676149, 4.816438956143024, 4.816554512507339, 4.816123020156624, 4.816480791354197, 4.816726495525673, 4.8177326685040205, 4.818482169939757, 4.819766149946885, 4.820946633880642, 4.821743983607304, 4.82269738488169, 4.82302334148042, 4.8234595256037265, 4.823843797070874, 4.823505199552449, 4.823634091461981, 4.823067222726444, 4.823069477259603, 4.823217601285667, 4.823890763922594, 4.824540905383437, 4.825207335215707, 4.825758610707725, 4.826568482808317, 4.8271390232210365, 4.827983212241394, 4.828625435541329, 4.829247986227575, 4.829431136430101, 4.82975585848584, 4.829654029165357, 4.829447638074914, 4.829161215085005, 4.829552886943698, 4.829069997133235, 4.829566370629336, 4.829086844925778, 4.830211725852153, 4.830346527292021, 4.831202280395113, 4.831898402631996, 4.831976187716336, 4.831799096131123, 4.831381483824614, 4.830652002002794, 4.829968154441129, 4.829394512290075, 4.82897350334878, 4.829304121175113, 4.8292627651712055, 4.829115125600188, 4.829129480995039, 4.82915009198058, 4.829311425899148, 4.8296072233460885, 4.829604521056432, 4.829615418821964, 4.828908835971884, 4.828317362646439, 4.827824539333224, 4.8277351368581485, 4.827704975026604, 4.828459610641054, 4.8284734442834685, 4.828314667611315, 4.827912643828859, 4.8270180546262225, 4.826708886783978, 4.82559561431225, 4.825107101190545, 4.824607929544559, 4.824664061275133, 4.8243072870480255, 4.824671915929854, 4.824839988989968, 4.825524728136974, 4.826027485498197, 4.826424787540012, 4.82652129404393, 4.826364373921395, 4.825990311336086, 4.825889275377438, 4.825926400938057, 4.8260361264689395, 4.826267593956761, 4.82633584109371, 4.82608778110278, 4.825892889804264, 4.8254354102833, 4.82545274341151, 4.825165555553167, 4.824911045738114, 4.824414555206531, 4.824363244901673, 4.8243226649742015, 4.824815979185851, 4.824893871833126, 4.82519703212279, 4.82534558601883, 4.825328020097039, 4.8263366448921765, 4.826390005774989, 4.826817347283018, 4.826420790164528, 4.826586265283747, 4.826346276752317, 4.826057072247849, 4.82583928261669, 4.825811696265033, 4.826305340954792, 4.826948801653272, 4.827011600551576, 4.826794441537685, 4.825984559537183, 4.825508778988545, 4.825237604881253, 4.825302924828608, 4.825790451868017, 4.826469407218491, 4.826343664464073, 4.826491487178721, 4.827091092100985, 4.827420550659132, 4.82826126480676, 4.828651111606262, 4.828679618109242, 4.828482343050536, 4.82770530490324, 4.827080958816849, 4.825731590853905, 4.8252090251481325, 4.824167667403054, 4.823844065123526, 4.82353397484695, 4.823127224070872, 4.822642511481281, 4.82242589601364, 4.8223257690779775, 4.822309558259299, 4.8220540686802735, 4.821800874984076, 4.821777782689498, 4.82215633563349, 4.822691340181928, 4.822870316208377, 4.823163734121288, 4.8224084512052645, 4.822348401767122, 4.821762435811288, 4.82134938040239, 4.821117076506405, 4.821078470399812, 4.82047163009186, 4.820417560123991, 4.820456239963253, 4.820542806113548, 4.8212656847073845, 4.820638983071445, 4.820832395355218, 4.820368089709181, 4.820418318663902, 4.819929775775317, 4.819814753749436, 4.819745855307632, 4.820053616610751, 4.820251660270518, 4.820398805472172, 4.820535835675613, 4.820702139336871, 4.821135911150488, 4.8218867559967205, 4.822808444924185, 4.823345960655617, 4.823406936786259, 4.82381533621663, 4.823464572947261, 4.823599840788325]
	
	ax0.plot(fit_time, fit_freq, marker='.', color=(0, 0.6, 0), alpha=0.2, linestyle=':', label='Measured')
	ax0.legend()
	
for wav, env in zip(wavefronts_f, powers):
	env0 = np.abs(env)	
	ax1.plot([wav, wav], [-env0, env], linestyle='-', color=(0.6, 0, 0), alpha=0.2)

ax1.grid(True)
ax1.set_xlabel("Time (ns)")
ax1.set_ylabel("Amplitude (1)")
ax1.set_title("Transformed Pulse: Time Domain")

for wav, env in zip(wavefronts, powers):
	env0 = np.abs(env)	
	ax2.plot([wav, wav], [-env0, env], linestyle='-', color=(1, 0.5, 0.05), alpha=0.45)

ax2.grid(True)
ax2.set_xlabel("Time (ns)")
ax2.set_ylabel("Amplitude (1)")
ax2.set_title("Original Pulse: Time Domain")

plt.tight_layout()


#======================== Print conditions summary ==========================

tab = "    "
print(markdown(f">:aSimulation Conditions Summary:<"))
print(markdown(f"{tab}>:aStimulus:<"))
print(markdown(f"{tab}{tab}ampl: >{ampl}<"))
print(markdown(f"{tab}{tab}b: >{b}<"))
print(markdown(f"{tab}{tab}sigma: >{sigma}<"))
print(markdown(f"{tab}{tab}f0: >{f0_GHz}<"))
print(markdown(f"{tab}{tab}omega: >{omega}<"))
print(markdown(f"{tab}{tab}phi: >{phi}<"))
print(markdown(f"{tab}{tab}tmax: >{tmax}<"))
print(markdown(f"{tab}>:aNonlinearity:< "))
print(markdown(f"{tab}{tab}length: >{length}<"))
print(markdown(f"{tab}{tab}L0: >{L0}<"))
print(markdown(f"{tab}{tab}I_star: >{I_star}<"))
print(markdown(f"{tab}{tab}C0: >{C0}<"))
print(markdown(f">:aSimulation Name:< >:q{os.path.basename(__file__)}<"))
print(markdown(f"{tab}Finish date: >:q{datestr}<"))
print(markdown(f"{tab}ID hash: >:q{cond_hash}<"))

# print(markdown(f"{tab}{tab}: >{}<"))
# print(markdown(f"{tab}{tab}: >{}<"))
# print(markdown(f"{tab}{tab}: >{}<"))
# print(markdown(f"{tab}{tab}: >{}<"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))
# print(markdown(f"\t"))


plt.show()
